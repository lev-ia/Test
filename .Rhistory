stri_detect_fixed((hazards[i,"Hazard.Event"]), "Wind") == TRUE ||
stri_detect_fixed((hazards[i,"Hazard.Event"]), "Lightning") == TRUE  ||
stri_detect_fixed((hazards[i,"Hazard.Event"]), "Winter Weather") == TRUE){
hazards[i,"Hazard.Event"] = "Severe Weather"
} else if (stri_detect_fixed((hazards[i,"Hazard.Event"]), "Drought") == TRUE ||
stri_detect_fixed((hazards[i,"Hazard.Event"]), "Heat") == TRUE) {
hazards[i,"Hazard.Event"] = "Drought/Heat"
}
}
# combine anything with flooding & costal
# combine storm/hail/wind/lightening as they represent extreme weather conditions cause meteorological hazards.
head(hazards, 5)
for (i in 1:nrow(hazards)) {
if (stri_detect_fixed(hazards[i,"Hazard.Event"], "Hurricane") == TRUE ) {
hazards[i,"Hazard.Event"] = "Hurricane"
} else if ( stri_detect_fixed(hazards[i,"Hazard.Event"], "Coastal") == TRUE ) {
hazards[i,"Hazard.Event"] = "Coastal"
} else if (stri_detect_fixed((hazards[i,"Hazard.Event"]), "Flooding") == TRUE){
hazards[i,"Hazard.Event"] = "Flooding"
} else if (stri_detect_fixed((hazards[i,"Hazard.Event"]), "Storm") == TRUE ||
stri_detect_fixed((hazards[i,"Hazard.Event"]), "Hail") == TRUE ||
stri_detect_fixed((hazards[i,"Hazard.Event"]), "Wind") == TRUE ||
stri_detect_fixed((hazards[i,"Hazard.Event"]), "Lightning") == TRUE  ||
stri_detect_fixed((hazards[i,"Hazard.Event"]), "Winter Weather") == TRUE){
hazards[i,"Hazard.Event"] = "Severe Weather"
} else if (stri_detect_fixed((hazards[i,"Hazard.Event"]), "Drought") == TRUE ||
stri_detect_fixed((hazards[i,"Hazard.Event"]), "Heat") == TRUE) {
hazards[i,"Hazard.Event"] = "Drought/Heat"
}
}
# combine anything with flooding & costal
# combine storm/hail/wind/lightening as they represent extreme weather conditions cause meteorological hazards.
head(hazards, 5)
distance <- get_dist(df)
property.value <- census[-c(1:30), ] %>% #remove unwanted rows
mutate(across(Region.1:Region.6, ~. *100))#convert from decimal to percentage
PVD_df <- data.frame(
Region_1 = c(property.value[1,2], sum(property.value[c(2:4), 2]), sum(property.value[c(5:7), 2]), sum(property.value[c(8:10), 2]), sum(property.value[c(11:13), 2])),
Region_2 = c(property.value[1,3], sum(property.value[c(2:4), 3]), sum(property.value[c(5:7), 3]), sum(property.value[c(8:10), 3]), sum(property.value[c(11:13), 3])),
Region_3 = c(property.value[1,4], sum(property.value[c(2:4), 4]), sum(property.value[c(5:7), 4]), sum(property.value[c(8:10), 4]), sum(property.value[c(11:13), 4])),
Region_4 = c(property.value[1,5], sum(property.value[c(2:4), 5]), sum(property.value[c(5:7), 5]), sum(property.value[c(8:10), 5]), sum(property.value[c(11:13), 5])),
Region_5 = c(property.value[1,6], sum(property.value[c(2:4), 6]), sum(property.value[c(5:7), 6]), sum(property.value[c(8:10), 6]), sum(property.value[c(11:13), 6])),
Region_6 = c(property.value[1,7], sum(property.value[c(2:4), 7]), sum(property.value[c(5:7), 7]), sum(property.value[c(8:10), 7]), sum(property.value[c(11:13), 7])),
row.names = c("<50", "50-199", "200-399", "400-999", ">1000")
)
load(file = "census.RData")
load(file = "emissions.RData")
load(file = "hazards.RData")
load(file = "inflation.RData")
load(file = "rates.RData")
property.value <- census[-c(1:30), ] %>% #remove unwanted rows
mutate(across(Region.1:Region.6, ~. *100))#convert from decimal to percentage
property.value <- census[-c(1:30), ] %>% #remove unwanted rows
mutate(across(Region.1:Region.6, ~. *100))#convert from decimal to percentage
load(file = "census.RData")
load(file = "emissions.RData")
load(file = "hazards.RData")
load(file = "inflation.RData")
load(file = "rates.RData")
property.value <- census[-c(1:30), ] %>% #remove unwanted rows
mutate(across(Region.1:Region.6, ~. *100))#convert from decimal to percentage
View(census)
property.value <- census[-c(1:30), ] %>% #remove unwanted rows
mutate(across("Region.1":"Region.6", ~. *100))#convert from decimal to percentage
#_______DATA SET UP______________________________________________________________________________________________________####
census[,] <- sapply(census[, ], as.numeric)
str(census)
property.value <- census[-c(1:30), ] %>% #remove unwanted rows
mutate(across(Region.1:Region.6, ~. *100))#convert from decimal to percentage
PVD_df <- data.frame(
Region_1 = c(property.value[1,2], sum(property.value[c(2:4), 2]), sum(property.value[c(5:7), 2]), sum(property.value[c(8:10), 2]), sum(property.value[c(11:13), 2])),
Region_2 = c(property.value[1,3], sum(property.value[c(2:4), 3]), sum(property.value[c(5:7), 3]), sum(property.value[c(8:10), 3]), sum(property.value[c(11:13), 3])),
Region_3 = c(property.value[1,4], sum(property.value[c(2:4), 4]), sum(property.value[c(5:7), 4]), sum(property.value[c(8:10), 4]), sum(property.value[c(11:13), 4])),
Region_4 = c(property.value[1,5], sum(property.value[c(2:4), 5]), sum(property.value[c(5:7), 5]), sum(property.value[c(8:10), 5]), sum(property.value[c(11:13), 5])),
Region_5 = c(property.value[1,6], sum(property.value[c(2:4), 6]), sum(property.value[c(5:7), 6]), sum(property.value[c(8:10), 6]), sum(property.value[c(11:13), 6])),
Region_6 = c(property.value[1,7], sum(property.value[c(2:4), 7]), sum(property.value[c(5:7), 7]), sum(property.value[c(8:10), 7]), sum(property.value[c(11:13), 7])),
row.names = c("<50", "50-199", "200-399", "400-999", ">1000")
)
PVD_df <- tibble::rownames_to_column(PVD_df, "PVD") #change format: rownames to column so ggplot2 can plot
PVD_df <- data.frame(
Region_1 = c(property.value[1,2], sum(property.value[c(2:4), 2]), sum(property.value[c(5:7), 2]), sum(property.value[c(8:10), 2]), sum(property.value[c(11:13), 2])),
Region_2 = c(property.value[1,3], sum(property.value[c(2:4), 3]), sum(property.value[c(5:7), 3]), sum(property.value[c(8:10), 3]), sum(property.value[c(11:13), 3])),
Region_3 = c(property.value[1,4], sum(property.value[c(2:4), 4]), sum(property.value[c(5:7), 4]), sum(property.value[c(8:10), 4]), sum(property.value[c(11:13), 4])),
Region_4 = c(property.value[1,5], sum(property.value[c(2:4), 5]), sum(property.value[c(5:7), 5]), sum(property.value[c(8:10), 5]), sum(property.value[c(11:13), 5])),
Region_5 = c(property.value[1,6], sum(property.value[c(2:4), 6]), sum(property.value[c(5:7), 6]), sum(property.value[c(8:10), 6]), sum(property.value[c(11:13), 6])),
Region_6 = c(property.value[1,7], sum(property.value[c(2:4), 7]), sum(property.value[c(5:7), 7]), sum(property.value[c(8:10), 7]), sum(property.value[c(11:13), 7])),
colname = c("<50", "50-199", "200-399", "400-999", ">1000")
)
# Clear environment and console
rm(list = ls())
graphics.off()
cat("\f")
# Setting up the environment, load the necessary packages
library(actuar)
library(dplyr)
library(EnvStats)
library(fitdistrplus)
library(ggplot2)
library(goftest)
library(MASS)
library(tidyr)
options(scipen=999)
set.seed(123)
# load data
load(file = "census.RData")
load(file = "hazards.RData")
# filtering non-impacting hazards
hazards <- hazards %>% arrange(Year) %>% filter(Property.Damage != 0)
# convert census type such that it could be read
census[,] <- sapply(census[, ], as.numeric)
str(census)
# create clustering
clusters <- hazards %>%
mutate(Hazard.Event =
recode(Hazard.Event,
"Hail/ Wind" = "Severe Weather",
"Winter Weather"= "Severe Weather",
"Wind" = "Severe Weather",
"Hail/ Severe Storm/Thunder Storm" = "Severe Weather",
"Severe Storm/Thunder Storm" = "Severe Weather",
"Hail" = "Severe Weather",
"Severe Storm/Thunder Storm/ Wind" = "Severe Weather",
"Lightning" = "Severe Weather",
"Lightning/ Wind" = "Severe Weather",
"Tornado"  = "Tornado",
"Coastal/ Wind" = "Severe Weather",
"Hurricane/Tropical Storm" = "Hurricane",
"Flooding" = "Flooding",
"Hail/ Lightning/ Wind" = "Severe Weather",
"Hail/ Severe Storm/Thunder Storm/ Wind" = "Severe Weather",
"Lightning/ Severe Storm/Thunder Storm" = "Severe Weather",
"Wildfire" = "Wildfire",
"Hail/ Lightning/ Severe Storm/Thunder Storm" = "Severe Weather",
"Hail/ Lightning/ Severe Storm/Thunder Storm/ Wind" = "Severe Weather",
"Tornado/ Wind" = "Tornado",
"Hail/ Tornado/ Wind" = "Tornado",
"Lightning/ Severe Storm/Thunder Storm/ Wind" = "Severe Weather",
"Severe Storm/Thunder Storm/ Winter Weather" = "Severe Weather",
"Wind/ Winter Weather" = "Severe Weather",
"Coastal/ Hurricane/Tropical Storm/ Wind" = "Hurricane",
"Severe Storm/Thunder Storm/ Wind/ Winter Weather" = "Severe Weather",
"Flooding/ Severe Storm/Thunder Storm" = "Flooding",
"Coastal" = "Coastal",
"Hail/ Lightning" = "Severe Weather",
"Flooding/ Lightning/ Severe Storm/Thunder Storm" = "Flooding",
"Heat" = "Drought/ Heat",
"Drought/ Heat" = "Drought/ Heat",
"Flooding/ Severe Storm/Thunder Storm/ Wind" = "Flooding",
"Flooding/ Wind" = "Flooding",
"Drought" = "Drought/ Heat",
"Hurricane/Tropical Storm/ Severe Storm/Thunder Storm" = "Hurricane",
"Coastal/ Flooding" = "Coastal",
"Flooding/ Lightning" = "Flooding",
"Coastal/ Severe Storm/Thunder Storm/ Wind" = "Coastal",
"Coastal/ Severe Storm/Thunder Storm" = "Coastal",
"Coastal/ Flooding/ Severe Storm/Thunder Storm/ Wind" = "Coastal",
"Lightning/ Tornado/ Wind" = "Tornado",
"Flooding/ Lightning/ Wind" = "Flooding",
"Flooding/ Hail"= "Flooding",
"Hail/ Tornado" = "Tornado",
"Hail/ Severe Storm/Thunder Storm/ Wind/ Winter Weather" = "Severe Weather",
"Coastal/ Hurricane/Tropical Storm/ Severe Storm/Thunder Storm/ Wind" = "Hurricane",
"Flooding/ Hail/ Wind"= "Flooding",
"Fog" = "Fog",
"Severe Storm/Thunder Storm - Wind" = "Severe Weather")) %>%
filter(Hazard.Event != "Fog")
summary(clusters)
unique(clusters$Hazard.Event)
table(c(unique(clusters$Hazard.Event)))
options(scipen=999)
set.seed(123)
# load data
load(file = "census.RData")
load(file = "hazards.RData")
# filtering non-impacting hazards
hazards <- hazards %>% arrange(Year) %>% filter(Property.Damage != 0)
# convert census type such that it could be read
census[,] <- sapply(census[, ], as.numeric)
str(census)
# create clustering
clusters <- hazards %>%
mutate(Hazard.Event =
recode(Hazard.Event,
"Hail/ Wind" = "Severe Weather",
"Winter Weather"= "Severe Weather",
"Wind" = "Severe Weather",
"Hail/ Severe Storm/Thunder Storm" = "Severe Weather",
"Severe Storm/Thunder Storm" = "Severe Weather",
"Hail" = "Severe Weather",
"Severe Storm/Thunder Storm/ Wind" = "Severe Weather",
"Lightning" = "Severe Weather",
"Lightning/ Wind" = "Severe Weather",
"Tornado"  = "Tornado",
"Coastal/ Wind" = "Severe Weather",
"Hurricane/Tropical Storm" = "Hurricane",
"Flooding" = "Flooding",
"Hail/ Lightning/ Wind" = "Severe Weather",
"Hail/ Severe Storm/Thunder Storm/ Wind" = "Severe Weather",
"Lightning/ Severe Storm/Thunder Storm" = "Severe Weather",
"Wildfire" = "Wildfire",
"Hail/ Lightning/ Severe Storm/Thunder Storm" = "Severe Weather",
"Hail/ Lightning/ Severe Storm/Thunder Storm/ Wind" = "Severe Weather",
"Tornado/ Wind" = "Tornado",
"Hail/ Tornado/ Wind" = "Tornado",
"Lightning/ Severe Storm/Thunder Storm/ Wind" = "Severe Weather",
"Severe Storm/Thunder Storm/ Winter Weather" = "Severe Weather",
"Wind/ Winter Weather" = "Severe Weather",
"Coastal/ Hurricane/Tropical Storm/ Wind" = "Hurricane",
"Severe Storm/Thunder Storm/ Wind/ Winter Weather" = "Severe Weather",
"Flooding/ Severe Storm/Thunder Storm" = "Flooding",
"Coastal" = "Coastal",
"Hail/ Lightning" = "Severe Weather",
"Flooding/ Lightning/ Severe Storm/Thunder Storm" = "Flooding",
"Heat" = "Drought/ Heat",
"Drought/ Heat" = "Drought/ Heat",
"Flooding/ Severe Storm/Thunder Storm/ Wind" = "Flooding",
"Flooding/ Wind" = "Flooding",
"Drought" = "Drought/ Heat",
"Hurricane/Tropical Storm/ Severe Storm/Thunder Storm" = "Hurricane",
"Coastal/ Flooding" = "Coastal",
"Flooding/ Lightning" = "Flooding",
"Coastal/ Severe Storm/Thunder Storm/ Wind" = "Coastal",
"Coastal/ Severe Storm/Thunder Storm" = "Coastal",
"Coastal/ Flooding/ Severe Storm/Thunder Storm/ Wind" = "Coastal",
"Lightning/ Tornado/ Wind" = "Tornado",
"Flooding/ Lightning/ Wind" = "Flooding",
"Flooding/ Hail"= "Flooding",
"Hail/ Tornado" = "Tornado",
"Hail/ Severe Storm/Thunder Storm/ Wind/ Winter Weather" = "Severe Weather",
"Coastal/ Hurricane/Tropical Storm/ Severe Storm/Thunder Storm/ Wind" = "Hurricane",
"Flooding/ Hail/ Wind"= "Flooding",
"Fog" = "Fog",
"Severe Storm/Thunder Storm - Wind" = "Severe Weather")) %>%
filter(Hazard.Event != "Fog")
summary(clusters)
(kable(unique(clusters$Hazard.Event)))
library(knitr)
(kable(unique(clusters$Hazard.Event)))
??kable
??knitr::kable
(kable(unique(clusters$Hazard.Event), pipe))
(kable(unique(clusters$Hazard.Event), "pipe"))
(kable(unique(clusters$Hazard.Event), "latex"))
(kable(unique(clusters$Hazard.Event), "html"))
(kable(unique(clusters$Hazard.Event), "html"))
(kable(unique(clusters$Hazard.Event), "html", align = "c"))
(kable(unique(clusters$Hazard.Event), "html", col.names = "Hazard Events", align = "c"))
# frequency by hazard to determine the level of hazard
frequency_hazard <- clusters %>%
group_by(clusters$Hazard.Event) %>%
summarise(events.pa = n(), prop_damage = sum(Property.Damage),
damage_per_event = sum(Property.Damage)/n(), risk_level =
ifelse(damage_per_event <= 1000000,"minor",
ifelse(damage_per_event<= 10000000,"medium","major")))
# find the mean of losses for each risk level
minor_mean <- frequency_hazard %>%
group_by(risk_level) %>%
filter(risk_level == "minor") %>%
summarise(dam = mean(damage_per_event)) #517881
medium_mean <- frequency_hazard %>%
group_by(risk_level) %>%
filter(risk_level == "medium") %>%
summarise(dam = mean(damage_per_event)) #4345546
major_mean <- frequency_hazard %>%
group_by(risk_level) %>%
filter(risk_level == "major") %>%
summarise(dam = mean(damage_per_event))) #134796018
# frequency by hazard to determine the level of hazard
frequency_hazard <- clusters %>%
group_by(clusters$Hazard.Event) %>%
summarise(events.pa = n(), prop_damage = sum(Property.Damage),
damage_per_event = sum(Property.Damage)/n(), risk_level =
ifelse(damage_per_event <= 1000000,"minor",
ifelse(damage_per_event<= 10000000,"medium","major")))
# find the mean of losses for each risk level
minor_mean <- frequency_hazard %>%
group_by(risk_level) %>%
filter(risk_level == "minor") %>%
summarise(dam = mean(damage_per_event)) #517881
medium_mean <- frequency_hazard %>%
group_by(risk_level) %>%
filter(risk_level == "medium") %>%
summarise(dam = mean(damage_per_event)) #4345546
major_mean <- frequency_hazard %>%
group_by(risk_level) %>%
filter(risk_level == "major") %>%
summarise(dam = mean(damage_per_event)) #134796018
# assign weighting for each risk
damage_table <- rbind(minor_mean, medium_mean, major_mean)
damage_table
weighting_minor <- as.numeric(damage_table[1,2]/sum(damage_table[,2]))
weighting_medium <- as.numeric(damage_table[2,2]/sum(damage_table[,2]))
weighting_major <- as.numeric(damage_table[3,2]/sum(damage_table[,2]))
sum(weighting_minor+weighting_medium+weighting_major)
# frequency by region
frequency_region <- clusters %>% group_by(Region,Year) %>% dplyr::summarise(tot_minor = sum(Hazard.Event == "Severe Weather"),
tot_medium = (sum(Hazard.Event == "Coastal")+sum( Hazard.Event == "Drought/ Heat")+
# frequency by hazard to determine the level of hazard
frequency_hazard <- clusters %>%
group_by(clusters$Hazard.Event) %>%
summarise(events.pa = n(), prop_damage = sum(Property.Damage),
damage_per_event = sum(Property.Damage)/n(), risk_level =
ifelse(damage_per_event <= 1000000,"minor",
ifelse(damage_per_event<= 10000000,"medium","major")))
## find the mean of losses for each risk level
minor_mean <- frequency_hazard %>%
group_by(risk_level) %>%
filter(risk_level == "minor") %>%
summarise(dam = mean(damage_per_event)) #517881
medium_mean <- frequency_hazard %>%
group_by(risk_level) %>%
filter(risk_level == "medium") %>%
summarise(dam = mean(damage_per_event)) #4345546
major_mean <- frequency_hazard %>%
group_by(risk_level) %>%
filter(risk_level == "major") %>%
summarise(dam = mean(damage_per_event)) #134796018
## assign weighting for each risk
damage_table <- rbind(minor_mean, medium_mean, major_mean)
damage_table
weighting_minor <- as.numeric(damage_table[1,2]/sum(damage_table[,2]))
weighting_medium <- as.numeric(damage_table[2,2]/sum(damage_table[,2]))
weighting_major <- as.numeric(damage_table[3,2]/sum(damage_table[,2]))
sum(weighting_minor+weighting_medium+weighting_major)
# frequency by region
frequency_region <- clusters %>%
group_by(Region,Year) %>%
dplyr::summarise(tot_minor = sum(Hazard.Event == "Severe Weather"),
tot_medium = (sum(Hazard.Event == "Coastal")+
sum( Hazard.Event == "Drought/ Heat")+
sum(Hazard.Event == "Flooding")+
sum(Hazard.Event == "Tornado")),
tot_major = (sum(Hazard.Event == "Wildfire")+
sum( Hazard.Event == "Hurricane")),
tot_event = tot_minor + tot_medium + tot_major,
prop_damage = sum(Property.Damage), .groups='drop')
frequency_region <- clusters %>%
group_by(Region,Year) %>%
dplyr::summarise(tot_minor = sum(Hazard.Event == "Severe Weather"),
tot_medium = (sum(Hazard.Event == "Coastal")+
sum( Hazard.Event == "Drought/ Heat")+
sum(Hazard.Event == "Flooding")+
sum(Hazard.Event == "Tornado")),
tot_major = (sum(Hazard.Event == "Wildfire")+
sum( Hazard.Event == "Hurricane")),
tot_event = tot_minor + tot_medium + tot_major,
prop_damage = sum(Property.Damage), .groups='drop')
## quantify the region to low risk, med risk and high risk
# checking per region the no of minor, med and major risk and the prop damage
analyse_reg1 <- frequency_region %>%
filter(Region==1) %>%
summarise(Region = "Region 1",
minor = sum(tot_minor), medium = sum(tot_medium),
major = sum(tot_major), sum_damage = sum(prop_damage))
analyse_reg2 <- frequency_region %>%
filter(Region==2) %>%
summarise(Region ="Region 2",
minor = sum(tot_minor), medium = sum(tot_medium),
major = sum(tot_major), sum_damage = sum(prop_damage))
analyse_reg3 <- frequency_region %>%
filter(Region==3) %>%
summarise(Region ="Region 3",
minor = sum(tot_minor), medium = sum(tot_medium),
major = sum(tot_major), sum_damage = sum(prop_damage))
analyse_reg4 <- frequency_region %>%
filter(Region==4) %>%
summarise(Region ="Region 4",
minor = sum(tot_minor), medium = sum(tot_medium),
major = sum(tot_major), sum_damage = sum(prop_damage))
analyse_reg5 <- frequency_region %>%
filter(Region==5) %>%
summarise(Region ="Region 5",
minor = sum(tot_minor), medium = sum(tot_medium),
major = sum(tot_major), sum_damage = sum(prop_damage))
analyse_reg6 <- frequency_region %>%
filter(Region==6) %>%
summarise(Region ="Region 6",
minor = sum(tot_minor), medium = sum(tot_medium),
major = sum(tot_major), sum_damage = sum(prop_damage))
region_analysis <- rbind(analyse_reg1,analyse_reg2,analyse_reg3,analyse_reg4,analyse_reg5,analyse_reg6)
# find the mean and median for each classes of event per region
minor_med <- median(region_analysis$minor) #379
medium_med <- median(region_analysis$medium) #117.5
major_med <- median(region_analysis$major) #11
minor_mean <- mean(region_analysis$minor) #369.833
medium_mean <- mean(region_analysis$medium) #121
major_mean <- mean(region_analysis$major) #14.333
damage_r1 <- region_analysis %>% filter(Region == "Region 1") %>%
summarise(damage = minor*weighting_minor + medium*weighting_medium +
major*weighting_major)
damage_r2 <- region_analysis %>% filter(Region == "Region 2") %>%
summarise(damage = minor*weighting_minor + medium*weighting_medium +
major*weighting_major)
damage_r3 <- region_analysis %>% filter(Region == "Region 3") %>%
summarise(damage = minor*weighting_minor + medium*weighting_medium +
major*weighting_major)
damage_r4 <- region_analysis %>% filter(Region == "Region 4") %>%
summarise(damage = minor*weighting_minor + medium*weighting_medium +
major*weighting_major)
damage_r5 <- region_analysis %>% filter(Region == "Region 5") %>%
summarise(damage = minor*weighting_minor + medium*weighting_medium +
major*weighting_major)
damage_r6 <- region_analysis %>% filter(Region == "Region 6") %>%
summarise(damage = minor*weighting_minor + medium*weighting_medium +
major*weighting_major)
reg_damage_analysis <- rbind(damage_r1, damage_r2, damage_r3, damage_r4, damage_r5, damage_r6)
# Setting up the environment, load the necessary packages
library(actuar)
library(dplyr)
library(EnvStats)
library(fitdistrplus)
library(flextable)
install.packages(flextable)
install.packages("flextable")
no
install.packages("flextable")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
knitr::opts_chunk$set(echo = TRUE)
# Setting up the environment, load the necessary packages
library(actuar)
library(dplyr)
library(EnvStats)
library(fitdistrplus)
library(flextable)
install.packages("flextable")
install.packages("gdtools")
install.packages("flextable")
library(gdtools)
install.packages("flextable")
install.packages("flextable")
install.packages("flextable")
install.packages("kableExtra")
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
kable(damage_table, align = "cr") %>%
kable_styling(full_width = FALSE)
kable(region_analysis) %>%
kable_styling(full_width = F)
damage_r1 <- region_analysis %>% filter(Region == "Region 1") %>% summarise(damage = minor*weighting_minor + medium*weighting_medium + major*weighting_major)
damage_r1 <- region_analysis %>% filter(Region == "Region 1") %>% dplyr::summarise(damage = minor*weighting_minor + medium*weighting_medium + major*weighting_major)
analyse_reg1 <- frequency_region %>% filter(Region==1) %>% summarise(Region = "Region 1", minor = sum(tot_minor), medium = sum(tot_medium),
major = sum(tot_major), sum_damage = sum(prop_damage))
# checking per region the no of minor, med and major risk and the prop damage
analyse_reg1 <- frequency_region %>% filter(Region==1) %>% dplyr::summarise(Region = "Region 1", minor = sum(tot_minor), medium = sum(tot_medium),
major = sum(tot_major), sum_damage = sum(prop_damage))
frequency_region <- clusters %>% group_by(Region,Year) %>% dplyr::summarise(tot_minor = sum(Hazard.Event == "Severe Weather"),
tot_medium = (sum(Hazard.Event == "Coastal")+sum( Hazard.Event == "Drought/ Heat")+
sum(Hazard.Event == "Flooding")+sum(Hazard.Event == "Tornado")),
tot_major = (sum(Hazard.Event == "Wildfire")+sum( Hazard.Event == "Hurricane")),
tot_event = tot_minor+ tot_medium+ tot_major,
prop_damage = sum(Property.Damage), .groups='drop')
# Setting up the environment, load the necessary packages
library(actuar)
library(dplyr)
library(EnvStats)
library(fitdistrplus)
library(kableExtra)
library(knitr)
library(ggplot2)
library(goftest)
library(MASS)
library(tidyr)
frequency_region <- clusters %>% group_by(Region,Year) %>% dplyr::summarise(tot_minor = sum(Hazard.Event == "Severe Weather"),
tot_medium = (sum(Hazard.Event == "Coastal")+sum( Hazard.Event == "Drought/ Heat")+
sum(Hazard.Event == "Flooding")+sum(Hazard.Event == "Tornado")),
tot_major = (sum(Hazard.Event == "Wildfire")+sum( Hazard.Event == "Hurricane")),
tot_event = tot_minor+ tot_medium+ tot_major,
prop_damage = sum(Property.Damage), .groups='drop')
analyse_reg1 <- frequency_region %>% filter(Region==1) %>% dplyr::summarise(Region = "Region 1", minor = sum(tot_minor), medium = sum(tot_medium),
major = sum(tot_major), sum_damage = sum(prop_damage))
analyse_reg2 <- frequency_region %>% filter(Region==2) %>% dplyr::summarise(Region ="Region 2",minor = sum(tot_minor), medium = sum(tot_medium),
major = sum(tot_major), sum_damage = sum(prop_damage))
analyse_reg3 <- frequency_region %>% filter(Region==3) %>% dplyr::summarise(Region ="Region 3",minor = sum(tot_minor), medium = sum(tot_medium),
major = sum(tot_major), sum_damage = sum(prop_damage))
analyse_reg4 <- frequency_region %>% filter(Region==4) %>% dplyr::summarise(Region ="Region 4",minor = sum(tot_minor), medium = sum(tot_medium),
major = sum(tot_major), sum_damage = sum(prop_damage))
analyse_reg5 <- frequency_region %>% filter(Region==5) %>% dplyr::summarise(Region ="Region 5",minor = sum(tot_minor), medium = sum(tot_medium),
major = sum(tot_major), sum_damage = sum(prop_damage))
analyse_reg6 <- frequency_region %>% filter(Region==6) %>% dplyr::summarise(Region ="Region 6",minor = sum(tot_minor), medium = sum(tot_medium),
major = sum(tot_major), sum_damage = sum(prop_damage))
region_analysis <- rbind(analyse_reg1,analyse_reg2,analyse_reg3,analyse_reg4,analyse_reg5,analyse_reg6)
region_analysis
reg_damage_analysis <- rbind(damage_r1, damage_r2, damage_r3, damage_r4, damage_r5, damage_r6)
reg_damage_analysis <- tibble::rownames_to_column(reg_damage_analysis, "Region")
reg_damage_analysis
reg_damage_analysis
colnames(reg_damage_analysis[2]) <- "Ave. Damage"
reg_damage_analysis
colnames(reg_damage_analysis)[2] <- "Ave. Damage"
reg_damage_analysis
colnames(reg_damage_analysis)[2] <- "Adj. Freq"
kable(reg_damage_analysis, align = "cr", caption = "Weight Adjusted Hazard's Frequency") %>%
kable_styling(full_width = F)
quantile(reg_damage_analysis$`Adj. Freq`,c(.33, .67))
#     33%      67%
# 14.74977 16.65021
region_risk <- ifelse(reg_damage_analysis$`Adj. Freq` <= quantile(reg_damage_analysis$`Adj. Freq`,c(.33)), "Low Risk",
ifelse(reg_damage_analysis$`Adj. Freq` <= quantile(reg_damage_analysis$`Adj. Freq`,c(.67)), "Medium Risk","High Risk"))
kable(region_risk, align = "cl", caption = "Region Risk Level") %>%
kable_styling(full_width = F)
```
region_risk
region_risk
region_risk <- ifelse(reg_damage_analysis$`Adj. Freq` <= quantile(reg_damage_analysis$`Adj. Freq`,c(.33)), "Low Risk",
ifelse(reg_damage_analysis$`Adj. Freq` <= quantile(reg_damage_analysis$`Adj. Freq`,c(.67)), "Medium Risk","High Risk"))
region_risk <- data.frame(region_risk)
region_risk <- tibble::rownames_to_column(region_risk, "Region")
colnames(region_risk)[2] <- "Risk Level"
kable(region_risk, align = "cl", caption = "Region Risk Level") %>%
kable_styling(full_width = F)
